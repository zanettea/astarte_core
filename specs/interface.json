{
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "Astarte Interface Schema",
    "description" : "This schema describes how an Astarte interface should be declared",
    "type": "object",
    "properties": {
        "interface_name": {
            "type": "string",
            "pattern": "^([a-zA-Z][a-zA-Z0-9]*.([a-zA-Z0-9][a-zA-Z0-9-]*.)*)?[a-zA-Z][a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 128,
            "description": "The name of the interface. This has to be an unique, alphanumeric reverse internet domain name, shorther than 128 characters."
        },
        "version_major": {
            "type": "integer",
            "description": "A Major version qualifier for this interface. Interfaces with the same id and different version_major number are deemed incompatible. It is then acceptable to redefine any property of the interface when changing the major version number."
        },
        "version_minor": {
            "type": "integer",
            "description": "A Minor version qualifier for this interface. Interfaces with the same id and major version number and different version_minor number are deemed compatible between each other. When changing the minor number, it is then only possible to insert further mappings. Any other modification might lead to incompatibilities and undefined behavior."
        },
        "type": {
            "type": "string",
            "enum": ["datastream", "properties"],
            "description": "Identifies the type of this Interface. Currently two types are supported: datastream and properties. datastream should be used when dealing with streams of non-persistent data, where a single path receives updates and there's no concept of state. properties, instead, are meant to be an actual state and as such they have only a change history, and are retained."
        },
        "ownership": {
            "type": "string",
            "enum": ["device", "server"],
            "description": "Identifies the ownership of the interface. Interfaces are meant to be unidirectional, and this property defines who's sending or receiving data. device means the device/gateway is sending data to Astarte, server means the device/gateway is receiving data from Astarte. Bidirectional mode is not supported, you should instantiate another interface for that."
        },
        "aggregation": {
            "type": "string",
            "enum": ["individual", "object"],
            "default": "individual",
            "description": "Identifies the aggregation of the mappings of the interface. Individual means every mapping changes state or streams data independently, whereas an object aggregation treats the interface as an object, making all the mappings changes interdependent. Choosing the right aggregation might drastically improve performances."
        },
        "description": {
            "type": "string",
            "description": "An optional description of the interface."
        },
        "doc": {
            "type": "string",
            "description": "A string containing documentation that will be injected in the generated client code."
        },
        "mappings": {
            "type": "array",
            "description": "Mappings define the endpoint of the interface, where actual data is stored/streamed. They are defined as relative URLs (e.g. /my/path) and can be parametrized (e.g.: /%{myparam}/path). A valid interface must have no mappings clash, which means that every mapping must resolve to a unique path or collection of paths (including parametrization). Every mapping acquires type, quality and aggregation of the interface.",
            "items": {"$ref": "mapping.json"},
            "minItems": 1,
            "maxItems": 10000,
            "uniqueItems": true
        }
    },
    "required": ["interface_name", "version_minor", "version_major", "type", "ownership", "mappings"]
}
